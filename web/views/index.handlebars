<main>
	<header class="">
		<nav>
			<!-- Go Multilang --> 
			<h1> Encombrants </h1>
			<ul>
				<li> <a id="legal-link" onclick="javascript:getPositionForLegal()"> Legal & Juridique </a> </li>
				<li> <a href="/add_point" id="add-point-link"> Add Point </a> </li>
				<li> <a href="/about" id="about"> About </a> </li>
			</ul>	
		</nav>
	</header>
	
	<article id="map">

	</article>

	<article id="enc_list">
		Will display list of active encombrants ...
	</article>
	
	<footer class="">
	</footer>

	<!-- usual div for SPA / XHR -->
	<div id="helper_div" class="helper_div"> </div>

	<!-- usual div for messaging -->
	<div id="message"> </div>
</main>

<script>
	var VueApp
	var geocode
	var realPosition
	var legal_cities = []
	var currentPosition = "{ lat: 10.00002, lng: 369874 }" // <% toJSON coords %>

	function getLocation(){
		if( navigator.geolocation ){
			navigator.geolocation.getCurrentPosition(showPosition, positionError, { enableHighAccuracy: true, timeout: 50000, maximumAge: 60000 } )
		} else {
			console.log( "Geolocation is not supported by your browser" )
		}
	}
	function positionError( error ){
		console.error( "POSITION: " )
		console.dir( error )
	}

	function showPosition( position ){
		/*
		console.group()
			console.log( "Current Latitude: " + position.coords.latitude )
			console.log( "Current Longitude: " + position.coords.longitude )
			console.log( "Accuracy: " + position.coords.accuracy )
			console.log( "Heading: " + position.coords.heading )
			console.log( "Timestamp: : " + new Date ( position.timestamp ) )
		console.groupEnd()
		*/
		initMap()
	}

	function initMap() {
		var coords = { lat: Number( currentPosition.lat ), lng: Number( currentPosition.lng ) }
		var map = new google.maps.Map(document.getElementById('map'), {
		  zoom: 4,
		  center: coords,
		  mapTypeId: "terrain"
		});
		var marker = new google.maps.Marker({
		  position: coords,
		  map: map
		});

		// getReverseGeoCode( coords, map )
      	}
	
	function getReverseGeoCode( coords, map ){
		geocoder = new google.maps.Geocoder();

  		console.dir( coords )

		geocoder.geocode({'location': coords }, function(results, status) {
			if (status === 'OK') {
				console.dir( results )  
				extractCitiesFromPostalCode( results )
			/*
				resultsMap.setCenter( results[0].geometry.location );
			    	var marker = new google.maps.Marker({
			      		map: resultsMap,
			      		position: results[0].geometry.location
			    	});
			   */
			  } else {
			    alert('Geocode was not successful for the following reason: ' + status);
			  }
		})
	}

	function extractCitiesFromPostalCode( results ){
		var localities = []

		results.forEach( function( elem, ind, arr){
		  
			readFullObject( elem )
		  
		} )

		function readFullObject( obj ){
			for( var p in obj ){
		  
				if( p === "types" ){
		      
		      			var postal_code = obj.types.includes( 'postal_code' )
		      			if( postal_code ){
			
						VueApp.cities = obj[ "postcode_localities" ]
						console.log( "1 : " + obj[ "postcode_localities" ] + " " + "2 : " + VueApp.cities )
			
		      			}
		    		}
		  	}	  
		}
	}


	// getMyPosition
	function getMyPosition( cb ) {
		navigator.geolocation.getCurrentPosition( getPosition, positionError, { enableHighAccuracy: true, timeout: 50000, maximumAge: 60000 } )
	}
	function getPosition( position ){
		realPosition = { lat: position.coords.latitude, lng: position.coords.longitude }
		console.log( realPosition )
		getReverseGeoCode( realPosition )
	}
	

	// EVENTS
	function getPositionForLegal( ){
		// display small city chooser div ( allow to close it )
		// get partial template from server
		// get current coordinates 
		// get cities associate with coordinates
		// on submit ask for a google search and take the first result associated with city + encombrants
		createVue()
		displayDiv()
		getMyPosition( )
		getPartial( "GET", "/legal_get-cities", document.getElementById( "helper_div" ) )
	}


	// UX Helpers
	function displayDiv() {
		document.getElementById( "helper_div" ).style.display = "initial"
		
		/*
		var elem_exist = document.getElementById( "legal_get-cities" ) 
		elem_exist ? document.querySelector( "body" ).removeChild( elem_exist ) : undefined

		var div = document.createElement( "div" )
		div.id = "legal_get-cities"
		div.style.position = "fixed"
		div.style.backgroundColor = "white"
		div.style.padding = "15px"
		div.style.width = "50%"
		div.style.height = "100px"
		div.style.top = "100px"
		div.style.right = "100px"

		// create close icon
		var close = document.createElement( "span" )
		close.style.textAlign = "right"
		var close_img = new Image()

		close_img.onload = function( ){
			console.log( "8797" )
		}

		close_img.src = "/web/images/icons/close-icon.png"

		// building stuff up
		close.appendChild( close_img )
		div.appendChild( close )
		document.querySelector( "body" ).appendChild( div )
		*/
	}

	// XHR Helper
	function getPartial( method, url, container ){
		var xhr = new XMLHttpRequest()	

		xhr.onreadystatechange = function ( event ){
			if( this.readyState === 4 ){
				if( this.status === 200 ){
					console.log( "AJAX OK : " + method + " " + url )
					container.innerHTML = this.responseText

					createVue()
				}
			}
		}

		xhr.open( method, url, true )
		xhr.send( null )
	}


	function createVue (){
		VueApp = new Vue({
			el: '#test_vue',
			data: {
				message: "Bienvenue dans les rouages de Vue JS",
				cities: [] 
			},
			methods: {
				enable_submit: function ( event ){
					var opt = document.querySelectorAll( "[name=city]" )
					var l = opt.length

					for( var n = 0; n < l; n++ ){
						if( opt[ n ].checked ) {
							document.getElementById( "submit_city" ).disabled = false
							break
						}
					}
				},
				submit_legal_city: function ( event ){
					// 1 - prevent default process of event
					event.preventDefault()

					// 2 - retrieve form data
					var city = document.querySelector('input[name="city"]:checked').value;
					console.log( "CITY : " + city ) 
					// 3 - send it via AJAX / XHR
					var xhr = new XMLHttpRequest()

					xhr.open( "POST", "/legal_city_choice", false )
					xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

					xhr.onreadystatechange = function( ){
						if( xhr.readyState === 4 && xhr.status === 200 ) {
							adaptDivForFullHTMLPage( xhr.responseText )
						}	
					}

					xhr.send( "city=" + city )
				}
			}
		})
	}

	function adaptDivForFullHTMLPage( link ){
		var iframe = document.createElement( "iframe" )
		iframe.src = link
		iframe.style.width = "100%"
		iframe.style.height = "100%"

		var el = document.getElementById( "helper_div" )

		while( el.firstChild ){
			el.removeChild( el.firstChild )
		}

		el.appendChild( iframe )
	} 

</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN2OomnGmeQLUrctCYJEXO64Y6KqohEZg&callback=getLocation"></script>	
